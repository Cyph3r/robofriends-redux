{"version":3,"sources":["serviceWorker.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","searchField","searchChange","className","type","id","placeholder","onChange","Card","name","email","alt","src","CardList","robots","map","user","i","key","ErrorBoundary","props","state","hasError","this","setState","children","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAYoBA,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2D,6CCFGC,G,MAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,yBAAKC,UAAU,OACX,2BACIA,UAAU,mCACVC,KAAK,SACLC,GAAG,SACHC,YAAY,gBACZC,SAAUL,OCMXM,G,MAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOL,EAAS,EAATA,GACzB,OACI,yBAAKF,UAAU,yDACX,yBAAKQ,IAAI,SAASC,IAAG,+BAA0BP,EAA1B,cACrB,6BACI,4BAAKI,GACL,6BACA,2BAAIC,OCULG,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BACKA,EAAOC,KAAI,SAACC,EAAMC,GACf,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLZ,GAAIS,EAAOG,GAAGZ,GACdI,KAAMK,EAAOG,GAAGR,KAChBC,MAAOI,EAAOG,GAAGP,aCW1BS,E,YApBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,UAAU,GAHC,E,iFAQfC,KAAKC,SAAS,CAAEF,UAAU,M,+BAI1B,OAAIC,KAAKF,MAAMC,SACJ,uDAGJC,KAAKH,MAAMK,a,GAjBEC,aCwDbC,E,YA9CX,aAAe,IAAD,8BACV,+CAaJC,eAAiB,SAAAC,GACb,EAAKL,SAAS,CAAEvB,YAAa4B,EAAMC,OAAOC,SAb1C,EAAKV,MAAQ,CACTP,OAAQ,GACRb,YAAa,IAJP,E,iFAQO,IAAD,OAChB+B,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEV,OAAQsB,S,+BAOrC,IAAD,EAC2Bb,KAAKF,MAA7BP,EADH,EACGA,OAAQb,EADX,EACWA,YAEVoC,EAAiBvB,EAAOwB,QAAO,SAAAC,GACjC,OAAOA,EAAM9B,KAAK+B,cAAcC,SAASxC,EAAYuC,kBAGzD,OAAK1B,EAAO4B,OAIR,yBAAKvC,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWD,aAAcqB,KAAKK,iBAI9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUd,OAAQuB,MAVnB,8C,GA3BDX,aCJlBiB,IAASC,OACL,6BACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SNuHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GAC/BA,EAAaC,kB","file":"static/js/main.c3cd46d9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\n\nconst SearchBox = ({ searchField, searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                id=\"search\"\n                placeholder=\"search robots\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;\n","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className=\"card bg-light-green dib br3 pa3 ma2 grow gw2 shadow-5\">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <hr />\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {robots.map((user, i) => {\n                return (\n                    <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />\n                );\n            })}\n        </div>\n    );\n};\n\nexport default CardList;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        };\n    }\n\n    componentDidCatch() {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Something went wrong...</h1>;\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport CardList from \"../components/CardList\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n\n//import { robots } from \"./robots\";\n// TODO: Add redux state\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchField: \"\"\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response => response.json())\n            .then(users => this.setState({ robots: users }));\n    }\n\n    onSearchChange = event => {\n        this.setState({ searchField: event.target.value });\n    };\n\n    render() {\n        const { robots, searchField } = this.state;\n\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        if (!robots.length) {\n            return <h3>Loading...</h3>;\n        }\n        return (\n            <div className=\"tc\">\n                <h1>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                {\n                    //<Scroll>\n                }\n                <ErrorBoundary>\n                    <CardList robots={filteredRobots} />\n                </ErrorBoundary>\n                {\n                    //</Scroll>\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\n\nReactDOM.render(\n    <div>\n        <App />\n    </div>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}